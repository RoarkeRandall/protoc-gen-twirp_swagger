/**
 * service.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Serviceproto) {
      root.Serviceproto = {};
    }
    root.Serviceproto.ExampleHat = factory(root.Serviceproto.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The ExampleHat model module.
   * @module model/ExampleHat
   * @version version not set
   */

  /**
   * Constructs a new <code>ExampleHat</code>.
   * A Hat is a piece of headwear made by a Haberdasher.
   * @alias module:model/ExampleHat
   * @class
   */
  var exports = function() {
    var _this = this;




  };

  /**
   * Constructs a <code>ExampleHat</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ExampleHat} obj Optional instance to populate.
   * @return {module:model/ExampleHat} The populated <code>ExampleHat</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('size')) {
        obj['size'] = ApiClient.convertToType(data['size'], 'Number');
      }
      if (data.hasOwnProperty('color')) {
        obj['color'] = ApiClient.convertToType(data['color'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
    }
    return obj;
  }

  /**
   * The size of a hat should always be in inches.
   * @member {Number} size
   */
  exports.prototype['size'] = undefined;
  /**
   * The color of a hat will never be 'invisible', but other than that, anything is fair game.
   * @member {String} color
   */
  exports.prototype['color'] = undefined;
  /**
   * The name of a hat is it's type. Like, 'bowler', or something.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;



  return exports;
}));


